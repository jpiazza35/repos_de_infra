# Build a container image for this services, publish it in ECR and GHCR

name: Build and publish the Market.Pricing.DB container image
run-name: ${{ github.actor }} build Market.Pricing.DB

# Run on push of every branch
on:
  push:

env:
  REPO_NAME: app-mpt-postgres-db
  PROJECT_NAME: app-mpt-postgres-db
  PROJECT_DIR: ./
  PRODUCT: mpt
  GH_REGISTRY: ghcr.io
  SS_TOOLS_ECR: app-mpt-postgres-db-ecr-repo
  #MPT_E2E_TEST_REPO_NAME: app-mpt-e2e-test
  DESCRIPTION: Market Pricing DB container for MPT project
  BUILD_PLATFORMS: linux/amd64 #, linux/arm64

jobs:

# Run on push to main branch
  build-push:
    name: Build and push the container image using Buildx
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PROJECT_DIR }}
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        postgres-version: ['latest']
    permissions:
      contents: read
      packages: write
      id-token: write # Required for requesting the JWT to use OIDC <-> AWS

    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Compute short versions of SHASUM and repository name
        id: shorten
        run: |
          echo "sha=$(git rev-parse --short=10 HEAD)" >> $GITHUB_OUTPUT
          echo "repo=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Print shortend names for debugging
        run: |
          echo "Short SHA ${{ steps.shorten.outputs.sha }}" 
          echo "Short Repo ${{ steps.shorten.outputs.repo }}"

      - name: Calculate RFC 3339 date
        id: date
        run: |
          echo "date=$(date --rfc-3339=seconds --utc)" >> $GITHUB_OUTPUT

      - name: Print calculated date
        run: |
          echo "Calculated date ${{ steps.date.outputs.date }}"

      # If someone pushed a tag, we should add that to the container image.
      # This takes a little bit of work to sort out.
      - name: Calculate tag
        id: tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Print calculated tag
        run: |
          echo "Calculated tag ${{ steps.tag.outputs.tag }}"

      - name: Login to Github Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GH_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: MarketPricingDB-to-SS-TOOLS-ECR
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build using buildx and push
        id: build-push
        uses: docker/build-push-action@v3
        with:
          tags: |
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:${{ steps.shorten.outputs.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}:${{ steps.shorten.outputs.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}:latest
          context: .
          file: ${{ env.PROJECT_DIR }}/Dockerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          outputs: type=docker
          cache-from: type=registry,ref=${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest
          cache-to: type=registry,ref=${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest,mode=max
          labels: |
            org.opencontainers.image.title=${{ env.PROJECT_NAME }}
            org.opencontainers.image.description=${{ env.DESCRIPTION }}
            org.opencontainers.image.licenses=COMMERCIAL
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.version=${{ steps.shorten.outputs.sha }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.base.name=docker.io/library/postgres:${{ matrix.postgres-version }}

      - name: Push images to registries
        run: |
          docker push -a ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}
          docker push -a ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}

      - name: Image digest
        run: echo ${{ steps.build-push.outputs.digest }}

      # - uses: tibdex/github-app-token@v1
      #   id: rw-installation-token
      #   with: 
      #     app_id: ${{ secrets.PIPELINE_GH_RW_APP_ID }}
      #     installation_id: ${{ secrets.PIPELINE_GH_RW_APP_INSTALLATION_ID }}
      #     private_key: ${{ secrets.PIPELINE_GH_RW_APP_PRIVATE_KEY }}

      # - name: Set needed outputs to trigger GHA pipelines
      #   id: pipeline-outputs
      #   run: |
      #     echo "docker_image_tag=${{ steps.shorten.outputs.sha }}" >> $GITHUB_OUTPUT
      #     echo "project_name=${{ env.PROJECT_NAME }}" >> $GITHUB_OUTPUT
      #     echo "product=${{ env.PRODUCT }}" >> $GITHUB_OUTPUT
      #     echo "repo_name=${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT
      
      # - name: Trigger e2e-test GH repo pipeline
      #   uses: peter-evans/repository-dispatch@v1
      #   with:
      #     token: ${{ steps.rw-installation-token.outputs.token }}
      #     repository: clinician-nexus/${{ env.MPT_E2E_TEST_REPO_NAME }}
      #     event-type: trigger-e2e-tests
      #     client-payload: '{"docker_image_tag": "${{ steps.pipeline-outputs.outputs.docker_image_tag }}", "project_name": "${{ steps.pipeline-outputs.outputs.project_name }}", "repo_name": "${{ steps.pipeline-outputs.outputs.repo_name }}"}'