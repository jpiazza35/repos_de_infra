# Build a container image for this services, publish it in the GitHub container registry

name: Build and publish the BM2-UI container image
run-name: ${{ github.actor }} build BM2-UI

# Run on push of every branch
on:
  push:
#    paths:
#      - './**'
#
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  REPO_NAME: app-bm2-ui
  PROJECT_NAME: app-bm2-ui
  PROJECT_DIR: ./
  PRODUCT: bm2
  GH_REGISTRY: ghcr.io
  SS_TOOLS_ECR: app-bm2-ui-ecr-repo
  HELM_REPO_NAME: helm-charts
  BM2_E2E_TEST_REPO_NAME: app-bm2-e2e-test
  DESCRIPTION: UI service for the BM2
  BUILD_PLATFORMS: linux/amd64 #, linux/arm64
  UNIT_TEST_DIR: ./cypress/unit/component

jobs:
# CD to Tests and run npm test
  test:
    name: Run Cypress tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '18.13' ]
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules and Cypress binary
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/Cypress
          key: ${{ runner.os }}-npm-cypress-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cypress-

      - name: Install Dependencies
        run: npm ci

      - name: Build the application
        run: npm run build # Use the correct build script for your application

      - name: Start the application
        run: npm run dev & # Starts your application as a background process
        # env:
          # Add necessary environment variables for your application

      - name: Wait for the application to start
        uses: jakejarvis/wait-action@master
        with:
          time: '15s' # Adjust the time if your application takes longer to start

      - name: Run Cypress tests
        run: npx cypress run --component
        env:
          # Set environment variables for Cypress if needed
          CYPRESS_BASE_URL: http://localhost:5173 # Replace with the correct URL if needed

# Run on push to main branch
  deploy-dev:
    name: Build and push the container image using Buildx
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PROJECT_DIR }}
    # if: github.ref == 'refs/heads/main'
    env:
      ENVIRONMENT: dev
      VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
      VITE_AUTH0_CLIENTID: ${{ secrets.VITE_AUTH0_CLIENTID }}
      VITE_AUTH0_AUDIENCE: ${{ secrets.VITE_AUTH0_AUDIENCE }}
      VITE_AM5_LICENSE_KEY: ${{ secrets.AM5_LICENSE_KEY }}
      VITE_LAUNCH_DARKLY: ${{ secrets.VITE_LAUNCH_DARKLY }}
    strategy:
      matrix:
        node-version: ['18.13']
    permissions:
      contents: write
      packages: write
      id-token: write # Required for requesting the JWT to use OIDC <-> AWS
    outputs:
      COMMIT_SHA_TAG: ${{ steps.shorten.outputs.sha }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Install GitVersion
      #   uses: gittools/actions/gitversion/setup@v0
      #   with:
      #       versionSpec: '5.x'
            
      # - name: Determine Version
      #   uses: gittools/actions/gitversion/execute@v0

      # - name: Display SemVer
      #   run: |
      #     echo "SemVer: $GITVERSION_SEMVER" && echo "$version" && echo "$major.$minor.$patch"
          
      # - name: Create git tag
      #   run: |
      #     git tag $GITVERSION_SEMVER
          
      # - name: Push git tag
      #   run: git push origin $GITVERSION_SEMVER

      # QEMU can be used to build multi-architecture images. We can revisit this at a later date.
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute short versions of SHASUM and repository name
        id: shorten
        run: |
          echo "sha=$(git rev-parse --short=10 HEAD)" >> $GITHUB_OUTPUT
          echo "repo=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT

      # - name: Create new tag
      #   id: git-tag
      #   run: |
      #     echo "git_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT   

      - name: Print shortend names for debugging
        run: |
          echo "Short SHA ${{ steps.shorten.outputs.sha }}"
          echo "Short Repo ${{ steps.shorten.outputs.repo }}"
      #echo "Git Tag ${{ steps.git-tag.outputs.git_tag }}"

      - name: Calculate RFC 3339 date
        id: date
        run: |
          echo "date=$(date --rfc-3339=seconds --utc)" >> $GITHUB_OUTPUT

      - name: Print calculated date
        run: |
          echo "Calculated date ${{ steps.date.outputs.date }}"

      # If someone pushed a tag, we should add that to the container image.
      # This takes a little bit of work to sort out.
      - name: Calculate tag
        id: tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Print calculated tag
        run: |
          echo "Calculated tag ${{ steps.tag.outputs.tag }}"
          
      - name: Login to Github Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GH_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: UI-dev-to-SS-TOOLS-ECR
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update .env
        run: |
          cp .github/.env.j2 ${{ env.PROJECT_DIR }}
          cp .github/update-env.py ${{ env.PROJECT_DIR }}
          python3 update-env.py

      - name: Build using buildx and push
        id: build-push
        uses: docker/build-push-action@v5
        with:
          tags: |
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:${{ steps.shorten.outputs.sha }}-${{ env.ENVIRONMENT }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}:${{ steps.shorten.outputs.sha }}-${{ env.ENVIRONMENT }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}:latest
          context: .
          build-args: ENV=${{ env.ENVIRONMENT }}
          file: ${{ env.PROJECT_DIR }}/Dockerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          outputs: type=docker
          cache-from: | 
            type=registry,ref=${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest
          cache-to: | 
            type=registry,ref=${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest,mode=max
          labels: |
            org.opencontainers.image.title=${{ env.PROJECT_NAME }}
            org.opencontainers.image.description=${{ env.DESCRIPTION }}
            org.opencontainers.image.licenses=COMMERCIAL
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.version=${{ steps.shorten.outputs.sha }}-${{ env.ENVIRONMENT }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.base.name=node:${{ matrix.node-version }}

      - name: Push images to registries
        run: |
          docker push -a ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}
          docker push -a ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}

      - name: Image digest
        run: echo ${{ steps.build-push.outputs.digest }}

      - name: Set needed outputs to trigger GHA pipelines
        id: pipeline-outputs
        run: |
          echo "docker_image_tag=${{ steps.shorten.outputs.sha }}-${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "project_name=${{ env.PROJECT_NAME }}" >> $GITHUB_OUTPUT
          echo "environment=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "product=${{ env.PRODUCT }}" >> $GITHUB_OUTPUT
          echo "repo_name=${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT

      - name: Get Github App Token
        id: rw-installation-token
        uses: tibdex/github-app-token@v1
        with: 
          app_id: ${{ secrets.PIPELINE_GH_RW_APP_ID }}
          installation_id: ${{ secrets.PIPELINE_GH_RW_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.PIPELINE_GH_RW_APP_PRIVATE_KEY }}
      
      - name: Trigger dev helm GH pipeline and pass docker-tag sha
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: clinician-nexus/${{ env.HELM_REPO_NAME }}
          event-type: trigger-dev-pipeline
          client-payload: '{"docker_image_tag": "${{ steps.pipeline-outputs.outputs.docker_image_tag }}", "project_name": "${{ steps.pipeline-outputs.outputs.project_name }}", "environment": "${{ steps.pipeline-outputs.outputs.environment }}", "product": "${{ steps.pipeline-outputs.outputs.product }}"}'

  ## Retag image and deploy it to QA helm-charts ##
  deploy-qa:
    name: Retag, push and deploy to QA
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PROJECT_DIR }}
    env:
      ENVIRONMENT: qa
      VITE_AM5_LICENSE_KEY: ${{ secrets.AM5_LICENSE_KEY }}
      VITE_LAUNCH_DARKLY: ${{ secrets.VITE_LAUNCH_DARKLY }}
      VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
      VITE_AUTH0_CLIENTID: ${{ secrets.VITE_AUTH0_CLIENTID }}
      VITE_AUTH0_AUDIENCE: ${{ secrets.VITE_AUTH0_AUDIENCE }}
      COMMIT_SHA_TAG: ${{ needs.deploy-dev.outputs.COMMIT_SHA_TAG }}
    strategy:
      matrix:
        node-version: ['18.13']
    permissions:
      contents: write
      packages: write
      id-token: write # Required for requesting the JWT to use OIDC <-> AWS
    outputs:
      IMAGE_TAG: ${{ steps.trim-tag.outputs.IMAGE_TAG }}
    needs: 
      - deploy-dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # QEMU can be used to build multi-architecture images. We can revisit this at a later date.
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Remove -dev suffix from IMAGE_TAG coming from dev pipeline
        id: trim-tag
        run: |
          echo "IMAGE_TAG=$(echo "${{ env.IMAGE_TAG }}" | cut -d '-' -f 1)" >> $GITHUB_OUTPUT

      - name: Calculate RFC 3339 date
        id: date
        run: |
          echo "date=$(date --rfc-3339=seconds --utc)" >> $GITHUB_OUTPUT

      - name: Print calculated date
        run: |
          echo "Calculated date ${{ steps.date.outputs.date }}"

      # If someone pushed a tag, we should add that to the container image.
      # This takes a little bit of work to sort out.
      - name: Calculate tag
        id: tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Print calculated tag
        run: |
          echo "Calculated tag ${{ steps.tag.outputs.tag }}"

      - name: Login to Github Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GH_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: UI-QA-to-SS-TOOLS-ECR

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update .env
        run: |
          cp .github/.env.j2 ${{ env.PROJECT_DIR }}
          cp .github/update-env.py ${{ env.PROJECT_DIR }}
          python3 update-env.py

      - name: Build using buildx and push
        id: build-push
        uses: docker/build-push-action@v5
        with:
          tags: |
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:${{ env.COMMIT_SHA_TAG }}-${{ env.ENVIRONMENT }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}:${{ env.COMMIT_SHA_TAG }}-${{ env.ENVIRONMENT }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}:latest
          context: .
          build-args: ENV=${{ env.ENVIRONMENT }}
          file: ${{ env.PROJECT_DIR }}/Dockerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          outputs: type=docker
          cache-from: type=registry,ref=${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest
          cache-to: type=registry,ref=${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest,mode=max
          labels: |
            org.opencontainers.image.title=${{ env.PROJECT_NAME }}
            org.opencontainers.image.description=${{ env.DESCRIPTION }}
            org.opencontainers.image.licenses=COMMERCIAL
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.version=${{ env.COMMIT_SHA_TAG }}-${{ env.ENVIRONMENT }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.base.name=node:${{ matrix.node-version }}

      - name: Push images to registries
        run: |
          docker push -a ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}
          docker push -a ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}

      - name: Set needed outputs for e2e GH repo pipeline
        id: pipeline-outputs
        run: |
          echo "docker_image_tag=${{ env.COMMIT_SHA_TAG }}-${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "project_name=${{ env.PROJECT_NAME }}" >> $GITHUB_OUTPUT
          echo "repo_name=${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT
          echo "environment=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "product=${{ env.PRODUCT }}" >> $GITHUB_OUTPUT

      - name: Get Github App Token
        id: rw-installation-token
        uses: tibdex/github-app-token@v1
        with: 
          app_id: ${{ secrets.PIPELINE_GH_RW_APP_ID }}
          installation_id: ${{ secrets.PIPELINE_GH_RW_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.PIPELINE_GH_RW_APP_PRIVATE_KEY }}
      
      - name: Trigger qa helm GH pipeline and pass docker-tag sha
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: clinician-nexus/${{ env.HELM_REPO_NAME }}
          event-type: trigger-qa-pipeline
          client-payload: '{"docker_image_tag": "${{ steps.helm.outputs.docker_image_tag }}", "project_name": "${{ steps.helm.outputs.project_name }}", "environment": "${{ steps.helm.outputs.environment }}", "product": "${{ steps.helm.outputs.product }}"}'

      - name: Trigger e2e-test GH repo pipeline
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: clinician-nexus/${{ env.BM2_E2E_TEST_REPO_NAME }}
          event-type: trigger-e2e-tests
          client-payload: '{"docker_image_tag": "${{ steps.pipeline-outputs.outputs.docker_image_tag }}", "project_name": "${{ steps.pipeline-outputs.outputs.project_name }}", "repo_name": "${{ steps.pipeline-outputs.outputs.repo_name }}", "commit_author": "${{ github.actor }}"}'

