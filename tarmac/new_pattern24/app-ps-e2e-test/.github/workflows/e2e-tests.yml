name: Run PS E2E tests
run-name: ${{ github.event.client_payload.project_name }} triggered PS E2E tests

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-e2e-tests]

env:
  GH_REGISTRY: ghcr.io
  REPO_NAME: ${{ github.event.client_payload.repo_name }}
  PROJECT_NAME: ${{ github.event.client_payload.project_name }}
  IMAGE_TAG: ${{ github.event.client_payload.docker_image_tag }}
  GH_OWNER: ${{ github.repository_owner }}
  COMMIT_AUTHOR: ${{ github.event.client_payload.commit_author }}
  GIT_TAG: ${{ github.event.client_payload.git_tag }}
  K8S_NAMESPACE: apps
  HELM_VERSION: '3.10.3'
  SLACK_CHANNEL_ID: "#ps-pipeline-alerts"

jobs:
  build:
    runs-on:
      - e2e
    permissions:
      packages: write
      contents: read
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Set up dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Set up Chrome
        run: |
          wget https://dl-ssl.google.com/linux/linux_signing_key.pub -O /tmp/google.pub
          sudo gpg --no-default-keyring --keyring /etc/apt/keyrings/google-chrome.gpg --import /tmp/google.pub
          echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -y
          sudo apt-get install google-chrome-stable -y
    
      - name: Set up Firefox
        run: |
          sudo apt install firefox -y

      - name: Set up MS Edge
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
          sudo rm microsoft.gpg
          sudo apt update && sudo apt install microsoft-edge-stable

      - name: Run mockdata tests
        if: always()
        uses: cypress-io/github-action@v6
        with:
          command: npm run cy:mockdata
      
      - name: Run realdata_fiscal tests
        if: always()
        uses: cypress-io/github-action@v6
        with:
          command: npm run cy:realdata_fiscal

      - name: Run realdata_calendar tests
        if: always()
        uses: cypress-io/github-action@v6
        with:
          command: npm run cy:realdata_calendar
          
      # - name: Login to Github Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.GH_REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Start minikube
      #   id: minikube
      #   uses: medyagh/setup-minikube@master

      # - name: Create apps namespace
      #   run: |
      #     kubectl create namespace ${{ env.K8S_NAMESPACE }}

      # - uses: azure/setup-helm@v3
      #   with:
      #     version: ${{ env.HELM_VERSION }}
      #   id: helm
      
      # - name: Pull, load and deploy PS services into minikube
      #   run: |
      #     bash ./minikube/minikube.sh
      #     sleep 10

      # - name: Check running k8s svcs and pods
      #   run: |
      #     kubectl get pods -n ${{ env.K8S_NAMESPACE }}
      #     kubectl describe pods -n ${{ env.K8S_NAMESPACE }}

      - uses: tibdex/github-app-token@v1
        id: rw-installation-token
        with: 
          app_id: ${{ secrets.PIPELINE_GH_RW_APP_ID }}
          installation_id: ${{ secrets.PIPELINE_GH_RW_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.PIPELINE_GH_RW_APP_PRIVATE_KEY }}

      - name: Trigger PS API pipeline
        uses: peter-evans/repository-dispatch@v3
        if: contains(env.PROJECT_NAME, 'api')
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: ${{ env.GH_OWNER }}/${{ env.REPO_NAME }}
          event-type: retrigger-api-pipeline
          client-payload: '{"docker_image_tag": "${{ env.IMAGE_TAG }}", "project_name": "${{ env.PROJECT_NAME }}", "commit_author": "${{ env.COMMIT_AUTHOR }}", "git_tag": "${{ env.GIT_TAG }}"}'

      - name: Trigger PS GRPC pipeline
        uses: peter-evans/repository-dispatch@v3
        if: contains(env.PROJECT_NAME, 'grpc')
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: ${{ env.GH_OWNER }}/${{ env.REPO_NAME }}
          event-type: retrigger-grpc-pipeline
          client-payload: '{"docker_image_tag": "${{ env.IMAGE_TAG }}", "project_name": "${{ env.PROJECT_NAME }}", "commit_author": "${{ env.COMMIT_AUTHOR }}", "git_tag": "${{ env.GIT_TAG }}"}'

      - name: Trigger PS repo pipeline
        uses: peter-evans/repository-dispatch@v3
        if: "!contains(env.PROJECT_NAME, 'api') && !contains(env.PROJECT_NAME, 'grpc')"
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: ${{ env.GH_OWNER }}/${{ env.REPO_NAME }}
          event-type: retrigger-ps-pipeline
          client-payload: '{"docker_image_tag": "${{ env.IMAGE_TAG }}", "project_name": "${{ env.PROJECT_NAME }}", "commit_author": "${{ env.COMMIT_AUTHOR }}", "git_tag": "${{ env.GIT_TAG }}"}'
  
      - name: Send a Slack Notification - Failure
        if: failure()
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          config: .github/workflows/slack-notifications-template/slack.yml
          channel: ${{ env.SLACK_CHANNEL_ID }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.PS_SLACK_WEBHOOK_URL }}
