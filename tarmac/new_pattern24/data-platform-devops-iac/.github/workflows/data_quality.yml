name: 'DATA_QUALITY'

permissions:
  id-token: write
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/data_quality/**/**'
      - '.github/workflows/data_quality.yml'
  push:
    branches:
      - main
    paths:
      - 'terraform/data_quality/**/**'
      - '.github/workflows/data_quality.yml'
env:
  AWS_REGION: us-east-1
  VAULT_AWSLB_SG_ID: "sg-059e1bfdc0847f319"
  SLACK_CHANNEL_ID: "#devops-pipeline-alerts"
  ORG: clinician-nexus

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    strategy:
      fail-fast: false
      matrix:
        environment:
          - tf_workspace: sdlc
            databricks_account_number: 230176594509
            account_profile_prefix: ss
          - tf_workspace: prod
            databricks_account_number: 467744931205
            account_profile_prefix: p
          - tf_workspace: preview
            databricks_account_number: 654654541334
            account_profile_prefix: s
    runs-on:
      - ubuntu-latest
    defaults:
      run:
        working-directory: terraform/data_quality
    env: 
      TF_WORKSPACE: ${{ matrix.environment.tf_workspace }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - uses: tibdex/github-app-token@v2
      id: get_installation_token
      with:
        app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
        installation_retrieval_mode: id
        installation_retrieval_payload: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
        private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

    - name: Setup private repo credentials for private modules
      run: |
        git config --global url."https://oauth2:${{ steps.get_installation_token.outputs.token }}@github.com/${{ env.ORG }}".insteadOf "https://github.com/${{ env.ORG }}"
      
    - name: Configure AWS credentials from SS_NETWORK account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::298556582965:role/aws-networking-github-oidc-custom-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSNetworkConfig

    - name: Setup Profile for ss_network
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_network
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_network
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_network
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_network

    - name: Configure AWS credentials from SS_DATABRICKS account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ matrix.environment.databricks_account_number }}:role/databricks-${{ matrix.environment.tf_workspace }}-github-oidc-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: ${{ matrix.environment.tf_workspace }}DatabricksConfig

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
  
    - name: Terraform Init
      id: init
      run: |
        terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Terraform Format
      id: tf-fmt
      run: terraform fmt -check -recursive

    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -var-file tfvars/${{ env.TF_WORKSPACE }}.tfvars -detailed-exitcode -no-color -out ${{ matrix.environment.tf_workspace }}_tfplan || export exitcode=$?
        terraform show -no-color ${{ matrix.environment.tf_workspace }}_tfplan > ${{ github.workspace }}/terraform/data_quality/${{ matrix.environment.tf_workspace }}_tfplan.out
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    - name: Set terraform plan output
      uses: actions/github-script@v6
      id: tf-plan-output
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('${{ github.workspace }}/terraform/data_quality/${{ matrix.environment.tf_workspace }}_tfplan.out', 'utf8')
          const plan = plan_file.length > 120000 ? plan_file.toString().substring(0, 120000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.tf-fmt.outcome }}\`
          #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`

          #### Terraform Plan ðŸ“–\`${{ steps.tf-plan.outcome }}\`

          #### Environment \`${{ env.TF_WORKSPACE }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${plan}
          \`\`\`
          
          </details>
          ${truncated_message}

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          core.setOutput('plan_output', output);

    # Save plan to artifacts  
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.environment.tf_workspace }}_tfplan
        path: ${{ github.workspace }}/terraform/data_quality/${{ matrix.environment.tf_workspace }}_tfplan
        
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-output.outputs.plan_output }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    - name: Push Terraform Output to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      env:
        SUMMARY: ${{ steps.tf-plan-output.outputs.plan_output }}
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

    - name: Slack Notify
      uses: rtCamp/action-slack-notify@v2
      if: failure()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':cry: data-platform-devops-iac Pull Request Terraform Plan Step :small_red_triangle_down:'
        SLACK_TITLE: ${{ matrix.environment.tf_workspace }}_DATABRICKS Pull Request Github Action - data-platform-devops-iac
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main'
    needs: terraform-plan
    strategy:
      fail-fast: false
      matrix:
        environment:
          - tf_workspace: sdlc
            databricks_account_number: 230176594509
            account_profile_prefix: ss
            approval: staging_devops
          - tf_workspace: prod
            databricks_account_number: 467744931205
            account_profile_prefix: p
            approval: prod_devops
          - tf_workspace: preview
            databricks_account_number: 654654541334
            account_profile_prefix: s
            approval: prod_devops
    runs-on:
      - ubuntu-latest
    defaults:
      run:
        working-directory: terraform/data_quality
    env: 
      TF_WORKSPACE: ${{ matrix.environment.tf_workspace }}
    environment: 
      name: ${{ matrix.environment.approval }}

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - uses: tibdex/github-app-token@v2
      id: get_installation_token
      with:
        app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
        installation_retrieval_mode: id
        installation_retrieval_payload: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
        private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

    - name: Setup private repo credentials for private modules
      run: |
        git config --global url."https://oauth2:${{ steps.get_installation_token.outputs.token }}@github.com/${{ env.ORG }}".insteadOf "https://github.com/${{ env.ORG }}"
      
    - name: Configure AWS credentials from SS_NETWORK account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::298556582965:role/aws-networking-github-oidc-custom-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSNetworkConfig

    - name: Setup Profile for ss_network
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_network
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_network
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_network
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_network

    - name: Configure AWS credentials from SS_DATABRICKS account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ matrix.environment.databricks_account_number }}:role/databricks-${{ matrix.environment.tf_workspace }}-github-oidc-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: ${{ matrix.environment.tf_workspace }}DatabricksConfig

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
  
    - name: Terraform Init
      id: init
      run: |
        terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Terraform Format
      id: tf-fmt
      run: terraform fmt -check -recursive

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.environment.tf_workspace }}_tfplan
        path: ${{ github.workspace }}/terraform/data_quality

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve ${{ matrix.environment.tf_workspace }}_tfplan

    - uses: geekyeggo/delete-artifact@v2
      with:
        name: ${{ matrix.environment.tf_workspace }}_tfplan
        failOnError: false

    - name: Slack Notify - Success
      uses: rtCamp/action-slack-notify@v2
      if: success()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':celery-man: data-platform-devops-iac Terraform Apply Step :rocket: ${{ job.status }}'
        SLACK_TITLE:  ${{ matrix.environment.tf_workspace }}_DATABRICKS Github Action - data-platform-devops-iac 
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Slack Notify - Failure
      uses: rtCamp/action-slack-notify@v2
      if: failure()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':cry: data-platform-devops-iac Terraform Apply Step :small_red_triangle_down: ${{ job.status }}'
        SLACK_TITLE:  ${{ matrix.environment.tf_workspace }}_DATABRICKS Github Action - data-platform-devops-iac 
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
