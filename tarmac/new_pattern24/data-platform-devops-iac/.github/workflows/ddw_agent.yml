name: DDW collector

permissions:
  id-token: write
  contents: read
  pull-requests: write
on:
  workflow_dispatch:
  pull_request:
    paths:
      - terraform/datadotworld/p_data_platform/**
      - terraform/datadotworld/modules/ecs/**
      - .github/workflows/ddw_agent.yml
  push:
    branches:
      - main
    paths:
      - terraform/datadotworld/p_data_platform/**
      - terraform/datadotworld/modules/ecs/**
      - .github/workflows/ddw_agent.yml

env:
  AWS_REGION: us-east-1
  SLACK_CHANNEL_ID: "#devops-pipeline-alerts"
  ORG: clinician-nexus
  VAULT_AWSLB_SG_ID: "sg-059e1bfdc0847f319"
  VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  VAULT_ADDR: https://vault.cliniciannexus.com:8200
jobs:
  terraform-plan:
    name: 'Terraform Plan'

    strategy:
      matrix:
        environment:
          - aws_account_number: 417425771013
            account_profile_prefix: p
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/datadotworld/p_data_platform
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: tibdex/github-app-token@v1
        id: get_installation_token
        with:
          app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
          installation_id: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

      - name: Configure AWS credentials from SS_TOOLS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: SSToolsConfig

      - name: Setup Profile for SS_TOOLS
        run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_tools
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_tools
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_tools
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_tools
      - name: Setup private repo credentials for private modules

        run: git config --global url."https://git:${{ steps.get_installation_token.outputs.token }}@github.com/${{ env.ORG }}".insteadOf "https://github.com/${{ env.ORG }}"

      - name: Configure AWS credentials from DATA_PLATFORM account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ matrix.environment.aws_account_number }}:role/data-platform-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: ${{ matrix.environment.account_profile_prefix }}DPConfig

      - name: Setup Profile for DATA_PLATFORM
        run: |
          aws configure set region ${{ env.AWS_REGION }} --profile p_data_platform
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile p_data_platform
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile p_data_platform
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile p_data_platform

      - name: Get Runner IP
        run: |
          echo "ip=$(curl icanhazip.com)" >> $GITHUB_ENV
      - name: Add IP to Vault SG for access
        run: |
          export cidr=$ip/32
          echo $cidr
          aws ec2 authorize-security-group-ingress \
            --profile ss_tools \
            --group-id ${{ env.VAULT_AWSLB_SG_ID }} \
            --protocol tcp \
            --port 8200 \
            --cidr $cidr

      - name: Get Vault Token
        id: get-token
        uses: hashicorp/vault-action@v2.7.3
        with:
          url: https://vault.cliniciannexus.com:8200
          role: gha-role
          method: jwt
          jwtGithubAudience: gha
          exportToken: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: tf-init
        run: |
          terraform init
      - name: Terraform Validate
        id: tf-validate
        run: terraform validate

      - name: Terraform Format
        id: tf-fmt
        run: terraform fmt -check -recursive

      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        env:
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -no-color -detailed-exitcode -out ${{ matrix.environment.account_profile_prefix }}_tfplan || export exitcode=$?
          terraform show -no-color ${{ matrix.environment.account_profile_prefix }}_tfplan > ${{ github.workspace }}/terraform/datadotworld/p_data_platform/${{ matrix.environment.account_profile_prefix }}_tfplan.out
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else   
            exit 0
          fi

      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.environment.account_profile_prefix }}_tfplan
          path: |
            ${{ github.workspace }}/terraform/datadotworld/p_data_platform/${{ matrix.environment.account_profile_prefix }}_tfplan
            ${{ github.workspace }}/terraform/datadotworld/p_data_platform/lambda/lambda.zip

      - name: Set terraform plan output
        uses: actions/github-script@v6
        id: tf-plan-output
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const plan_file = fs.readFileSync('${{ github.workspace }}/terraform/datadotworld/p_data_platform/${{ matrix.environment.account_profile_prefix }}_tfplan.out', 'utf8')
            const plan = plan_file.length > 120000 ? plan_file.toString().substring(0, 120000) + " ..." : plan_file
            const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.tf-fmt.outcome }}\`
            #### Terraform Validation ðŸ¤–\`${{ steps.tf-validate.outcome }}\`
            
            #### Terraform Plan ðŸ“–\`${{ steps.tf-plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${plan}
            \`\`\`
            
            </details>
            ${truncated_message}
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            core.setOutput('plan_output', output);

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-output.outputs.plan_output }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      - name: Push Terraform Output to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          SUMMARY: ${{ steps.tf-plan-output.outputs.plan_output }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

      - name: Remove IP from Vault SG
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --profile ss_tools \
            --group-id ${{ env.VAULT_AWSLB_SG_ID }} \
            --protocol tcp \
            --port 8200 \
            --cidr $ip/32

      - name: Slack Notify - Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_MESSAGE: ':cry: infra-cluster-resources Terraform Plan Step :small_red_triangle_down: ${{ job.status }}'
          SLACK_TITLE: datadotworld Github Action - data-platform-iac
          SLACK_USERNAME: DevOps
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notify - Success
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_MESSAGE: ':celery-man: infra-cluster-resources Terraform Plan Step :rocket: ${{ job.status }}'
          SLACK_TITLE: datadotworld Github Action - data-platform-iac
          SLACK_USERNAME: DevOps
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ terraform-plan ]
    strategy:
      matrix:
        environment:
          - aws_account_number: 417425771013
            account_profile_prefix: p
            approval: prod_devops
    environment:
      name: ${{ matrix.environment.approval }}
    defaults:
      run:
        working-directory: terraform/datadotworld/p_data_platform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: tibdex/github-app-token@v1
        id: get_installation_token
        with:
          app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
          installation_id: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

      - name: Setup private repo credentials for private modules
        run: git config --global url."https://git:${{ steps.get_installation_token.outputs.token }}@github.com/${{ env.ORG }}".insteadOf "https://github.com/${{ env.ORG }}"

      - name: Configure AWS credentials from SS_TOOLS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: SSToolsConfig

      - name: Setup Profile for SS_TOOLS
        run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_tools
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_tools
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_tools
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_tools

      - name: Configure AWS credentials from DATA_PLATFORM account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ matrix.environment.aws_account_number }}:role/data-platform-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: ${{ matrix.environment.account_profile_prefix }}DPConfig
    
      - name: Setup Profile for DATA_PLATFORM
        run: |
          aws configure set region ${{ env.AWS_REGION }} --profile p_data_platform
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile p_data_platform
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile p_data_platform
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile p_data_platform

      - name: Get Runner IP
        run: |
          echo "ip=$(curl icanhazip.com)" >> $GITHUB_ENV
      - name: Add IP to Vault SG for access
        run: |
          aws ec2 authorize-security-group-ingress \
            --profile ss_tools \
            --group-id ${{ env.VAULT_AWSLB_SG_ID }} \
            --protocol tcp \
            --port 8200 \
            --cidr $ip/32

      - name: Get Vault Token
        id: get-token
        uses: hashicorp/vault-action@v2.7.3
        with:
          url: https://vault.cliniciannexus.com:8200
          role: gha-role
          method: jwt
          jwtGithubAudience: gha
          exportToken: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        env:
          VAULT_ADDR: ${{ env.VAULT_ADDR }}
        id: tf-init
        run: |
          terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.environment.account_profile_prefix }}_tfplan
          path: ${{ github.workspace }}/terraform/datadotworld/p_data_platform

      - name: Terraform Apply
        env:
          VAULT_TOKEN: ${{ env.VAULT_TOKEN }}
        run: terraform apply -auto-approve ${{ matrix.environment.account_profile_prefix }}_tfplan

      - name: Remove IP from Vault SG
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --profile ss_tools \
            --group-id ${{ env.VAULT_AWSLB_SG_ID }} \
            --protocol tcp \
            --port 8200 \
            --cidr $ip/32

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ matrix.environment.account_profile_prefix }}_tfplan
          failOnError: false

      - name: Slack Notify - Success
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_MESSAGE: ':celery-man: infra-cluster-resources Terraform Apply Step :rocket: ${{ job.status }}'
          SLACK_TITLE: datadotworld Github Action - data-platform-iac
          SLACK_USERNAME: DevOps
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notify - Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_MESSAGE: ':cry: infra-cluster-resources Terraform Apply Step :small_red_triangle_down: ${{ job.status }}'
          SLACK_TITLE: datadotworld Github Action - data-platform-iac
          SLACK_USERNAME: DevOps
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}