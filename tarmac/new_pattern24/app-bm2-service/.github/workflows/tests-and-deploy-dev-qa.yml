# Build a container image for this services, publish it in the GitHub container registry

name: Build and publish the bm2-Service container image
run-name: ${{ github.actor }} build bm2-Service

permissions: write-all

# Run on push of every branch
on:
  push:
#    paths:
#      - './**'
#
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  REPO_NAME: app-bm2-service
  PROJECT_NAME: app-bm2-service
  PROJECT_DIR: ./
  PRODUCT: bm2
  GH_REGISTRY: ghcr.io
  SS_TOOLS_ECR: app-bm2-service-ecr-repo
  HELM_REPO_NAME: helm-charts
  BM2_E2E_TEST_REPO_NAME: app-bm2-e2e-test
  DESCRIPTION: Performance service for the Performance Suite Application
  BUILD_PLATFORMS: linux/amd64 #, linux/arm64
  #UNIT_TEST_DIR: ./Tests

jobs:
# # CD to Tests and run npm test
#   test:
#     name: Run unit tests
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         go-version: [ '1.20' ]
#     permissions:
#       contents: read

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Install Node ${{ matrix.go-version }}
#         uses: actions/setup-node@v3
#         with:
#           go-version: ${{ matrix.go-version }}

#       - name: Install Dependencies
#         run: |
#           cd ${{ env.UNIT_TEST_DIR }}
#           go mod download

#       - name: Run unit tests
#         run: |
#           cd ${{ env.UNIT_TEST_DIR }}
#           go test

# Run on push to main branch
  deploy-dev:
    name: Build and push the container image using Buildx
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PROJECT_DIR }}
    if: github.ref == 'refs/heads/main'
    env:
      ENVIRONMENT: dev
    strategy:
      matrix:
        go-version: ['1.20']
    permissions:
      contents: write
      packages: write
      id-token: write # Required for requesting the JWT to use OIDC <-> AWS
    outputs:
      COMMIT_SHA_TAG: ${{ steps.shorten.outputs.sha }} 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Install GitVersion
      #   uses: gittools/actions/gitversion/setup@v0
      #   with:
      #       versionSpec: '5.x'
            
      # - name: Determine Version
      #   uses: gittools/actions/gitversion/execute@v0

      # - name: Display SemVer
      #   run: |
      #     echo "SemVer: $GITVERSION_SEMVER" && echo "$version" && echo "$major.$minor.$patch"
          
      # - name: Create git tag
      #   run: |
      #     git tag $GITVERSION_SEMVER
          
      # - name: Push git tag
      #   run: git push origin $GITVERSION_SEMVER

      # QEMU can be used to build multi-architecture images. We can revisit this at a later date.
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute short versions of SHASUM and repository name
        id: shorten
        run: |
          echo "sha=$(git rev-parse --short=10 HEAD)" >> $GITHUB_OUTPUT
          echo "repo=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT

      # - name: Create new tag
      #   id: git-tag
      #   run: |
      #     echo "git_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT   

      - name: Print shortend names for debugging
        run: |
          echo "Short SHA ${{ steps.shorten.outputs.sha }}"
          echo "Short Repo ${{ steps.shorten.outputs.repo }}"

      - name: Calculate RFC 3339 date
        id: date
        run: |
          echo "date=$(date --rfc-3339=seconds --utc)" >> $GITHUB_OUTPUT

      - name: Print calculated date
        run: |
          echo "Calculated date ${{ steps.date.outputs.date }}"

      # If someone pushed a tag, we should add that to the container image.
      # This takes a little bit of work to sort out.
      - name: Calculate tag
        id: tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Print calculated tag
        run: |
          echo "Calculated tag ${{ steps.tag.outputs.tag }}"
          
      - name: Login to Github Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GH_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: UI-dev-to-SS-TOOLS-ECR
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build using buildx and push
        id: build-push
        uses: docker/build-push-action@v5
        with:
          tags: |
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:${{ steps.shorten.outputs.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}:${{ steps.shorten.outputs.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}:latest
          context: .
          build-args: GO_VERSION=${{ matrix.go-version }}
          file: ${{ env.PROJECT_DIR }}/Dockerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          outputs: type=docker
          cache-from: | 
            type=registry,ref=${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest
          cache-to: | 
            type=registry,ref=${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}:latest,mode=max
          labels: |
            org.opencontainers.image.title=${{ env.PROJECT_NAME }}
            org.opencontainers.image.description=${{ env.DESCRIPTION }}
            org.opencontainers.image.licenses=COMMERCIAL
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.version=${{ steps.shorten.outputs.sha }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.base.name=node:${{ matrix.go-version }}

      - name: Push images to registries
        run: |
          docker push -a ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.SS_TOOLS_ECR }}
          docker push -a ${{ steps.login-ecr.outputs.registry }}/${{ env.SS_TOOLS_ECR }}

      - name: Image digest
        run: echo ${{ steps.build-push.outputs.digest }}

      - name: Set needed outputs to trigger GHA pipelines
        id: pipeline-outputs
        run: |
          echo "docker_image_tag=${{ steps.shorten.outputs.sha }}" >> $GITHUB_OUTPUT
          echo "project_name=${{ env.PROJECT_NAME }}" >> $GITHUB_OUTPUT
          echo "environment=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "product=${{ env.PRODUCT }}" >> $GITHUB_OUTPUT
          echo "repo_name=${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT

      - name: Get Github App Token
        id: rw-installation-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.PIPELINE_GH_RW_APP_ID }}
          installation_id: ${{ secrets.PIPELINE_GH_RW_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.PIPELINE_GH_RW_APP_PRIVATE_KEY }}
      
      - name: Trigger dev helm GH pipeline and pass docker-tag sha
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: clinician-nexus/${{ env.HELM_REPO_NAME }}
          event-type: trigger-dev-pipeline
          client-payload: '{"docker_image_tag": "${{ steps.pipeline-outputs.outputs.docker_image_tag }}", "project_name": "${{ steps.pipeline-outputs.outputs.project_name }}", "environment": "${{ steps.pipeline-outputs.outputs.environment }}", "product": "${{ steps.pipeline-outputs.outputs.product }}"}'

  ## Retag image and deploy it to QA helm-charts ##
  deploy-qa:
    name: Retag, push and deploy to QA
    runs-on: ubuntu-latest
    needs: deploy-dev
    defaults:
      run:
        working-directory: ${{ env.PROJECT_DIR }}
    env:
      ENVIRONMENT: qa
      IMAGE_TAG: ${{ needs.deploy-dev.outputs.COMMIT_SHA_TAG }}
    strategy:
      matrix:
        dotnet-version: ['7.0']
    permissions:
      contents: read
      packages: write
      id-token: write # Required for requesting the JWT to use OIDC <-> AWS

    steps:
      - uses: tibdex/github-app-token@v2
        id: read-installation-token
        with: 
          app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
          installation_id: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.read-installation-token.outputs.token }}
          submodules: true
      
      - name: Configure AWS Credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: QA-retag-to-SS-TOOLS-ECR
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retag image in ECR
        uses: abronin/ecr-retag-action@v1
        with:
          repository: ${{ env.SS_TOOLS_ECR }}
          tag: ${{ env.IMAGE_TAG }}
          new-tags: ${{ env.ENVIRONMENT }}

      - name: Retag image in GHCR
        uses: tinact/docker.image-retag@master
        with:
          image_name: ${{ env.SS_TOOLS_ECR }}
          image_old_tag: ${{ env.IMAGE_TAG }}
          image_new_tag: ${{ env.ENVIRONMENT }}
          registry: ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}

      - uses: tibdex/github-app-token@v2
        id: rw-installation-token
        with: 
          app_id: ${{ secrets.PIPELINE_GH_RW_APP_ID }}
          installation_id: ${{ secrets.PIPELINE_GH_RW_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.PIPELINE_GH_RW_APP_PRIVATE_KEY }}

      - name: Set needed outputs for helm GH repo pipeline
        id: pipeline-outputs
        run: |
          echo "docker_image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "project_name=${{ env.PROJECT_NAME }}" >> $GITHUB_OUTPUT
          echo "repo_name=${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT
          echo "environment=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "product=${{ env.PRODUCT }}" >> $GITHUB_OUTPUT
      
      - name: Trigger production helm GH pipeline and pass docker-tag sha
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: clinician-nexus/${{ env.HELM_REPO_NAME }}
          event-type: trigger-qa-pipeline
          client-payload: '{"docker_image_tag": "${{ steps.pipeline-outputs.outputs.docker_image_tag }}", "project_name": "${{ steps.pipeline-outputs.outputs.project_name }}", "environment": "${{ steps.pipeline-outputs.outputs.environment }}", "product": "${{ steps.pipeline-outputs.outputs.product }}"}'

      - name: Trigger e2e-test GH repo pipeline
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.rw-installation-token.outputs.token }}
          repository: clinician-nexus/${{ env.BM2_E2E_TEST_REPO_NAME }}
          event-type: trigger-e2e-tests
          client-payload: '{"docker_image_tag": "${{ steps.pipeline-outputs.outputs.docker_image_tag }}", "project_name": "${{ steps.pipeline-outputs.outputs.project_name }}", "repo_name": "${{ steps.pipeline-outputs.outputs.repo_name }}", "commit_author": "${{ github.actor }}"}'