---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-script
  namespace: github-runners
data:
  reqs.sh: |
    #!/bin/bash
    # set -ex
    
    usermod -aG docker runner 
    usermod -aG root runner

    sudo apt-get update
    sudo apt-get install -y \
      curl \
      jq \
      wget \
      git \
      build-essential \
      unzip \
      apt-transport-https \
      ca-certificates \
      sudo

    ## Install AWSCLI
    sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/runner/awscliv2.zip"
    sudo unzip /runner/awscliv2.zip
    sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

    ## Install Minikube
    sudo curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    sudo chmod +x minikube
    sudo mv minikube /usr/local/bin/

    ## Install nvm
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
    
    export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

    ## Install latest node
    nvm install --lts
    nvm use default

    ## Install Cypress
    npm install -g cypress

    ## Install NPX
    npm install -g npx

    ## Install Kubectl
    sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    sudo chmod +x kubectl
    sudo mv kubectl /usr/local/bin/

    ## Install Helm
    sudo curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    sudo chmod 700 get_helm.sh
    sudo ./get_helm.sh
---
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerSet
metadata:
  name: e2e-k8s-runners
spec:
  ephemeral: true
  # replicas: 2
  organization: clinician-nexus
  serviceAccountName: github-runner
  dockerdWithinRunnerContainer: true
  githubAPICredentialsFrom:
    secretRef: 
      name: arc-github-app-secret
  labels: 
    - sharedservices-e2e
    - e2e
  selector:
    matchLabels:
      runner: sharedservices-e2e
  serviceName: github-runners
  containerMode: dind
  workVolumeClaimTemplate:
    accessModes: ["ReadWriteOnce"]
    storageClassName: gp3
    resources:
      requests:
        storage: 5Gi
  template:
    metadata:
      labels:
        runner: sharedservices-e2e
    spec:
      automountServiceAccountToken: true
      securityContext:
        # All level/role/type/user values will vary based on your SELinux policies.
        # See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/container_security_guide/docker_selinux_security_policy for information about SELinux with containers
        seLinuxOptions:
          level: "s0"
          role: "system_r"
          type: "super_t"
          user: "system_u"
        
      containers:
        - name: runner
          image: runner-image
          imagePullPolicy: Always
          env:
            - name: DOCKER_ENABLED
              value: "true"
            - name: DOCKERD_IN_RUNNER
              value: "true"
          resources:
            limits:
              cpu: "3.0"
              memory: "4Gi"
            requests:
              cpu: "0.5"
              memory: "2Gi"
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash", "-c", "/runner/scripts/reqs.sh"]
          volumeMounts:
            - name: dind-cert
              mountPath: /certs/client
              readOnly: true
            - name: pod-templates
              mountPath: /runner/pod-templates
              readOnly: true
            - name: config-script
              mountPath: /runner/scripts
            - name: var-lib-docker
              mountPath: /var/lib/docker
          securityContext:
            readOnlyRootFilesystem: false ## allows writing tools cache
            allowPrivilegeEscalation: true ## allows sudo
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
      volumes:
        - name: dind-cert
          emptyDir: {}
        - name: pod-templates
          configMap:
            name: pod-templates
        ## Install tools on the runner at startup that can be used by e2e workflows
        - name: config-script
          configMap:
            name: config-script
            defaultMode: 0777
        ## This var-lib-docker vol to beef up vol on docker container
        - name: var-lib-docker
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: 
                  - "ReadWriteOnce"
                storageClassName: "gp3"
                resources:
                  requests:
                    storage: 30Gi ## Needs the space for all the ghcr downloads
