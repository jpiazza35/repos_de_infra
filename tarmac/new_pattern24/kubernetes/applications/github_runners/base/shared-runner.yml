---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-config-script
  namespace: github-runners
data:
  reqs.sh: |
    #!/bin/bash
    # set -ex
    
    usermod -aG docker runner 
    usermod -aG root runner
    echo 'export ACTIONS_RUNNER_REQUIRE_JOB_CONTAINER=false' >> ~/.bashrc

    sudo apt-get update
    sudo apt-get install -y \
      curl \
      jq \
      wget \
      git \
      build-essential \
      unzip \
      apt-transport-https \
      ca-certificates \
      sudo

    ## Install AWSCLI
    sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/runner/awscliv2.zip"
    sudo unzip /runner/awscliv2.zip
    sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
    
    ## Install AZ Cli
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
---
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerSet
metadata:
  name: k8s-runners
  namespace: github-runners
spec:
  ephemeral: true
  ## Don't set replicas with HPA: https://github.com/actions/actions-runner-controller/issues/206#issuecomment-748601907
  # replicas: 7
  organization: clinician-nexus
  serviceAccountName: github-runner
  dockerEnabled: false
  dockerdWithinRunnerContainer: false
  githubAPICredentialsFrom:
    secretRef: 
      name: arc-github-app-secret
  labels: 
    - sharedservices
    - k8s
  selector:
    matchLabels:
      runner: sharedservices-k8s
  serviceName: github-runners
  containerMode: kubernetes
  workVolumeClaimTemplate:
    accessModes: ["ReadWriteOnce"]
    storageClassName: gp3
    resources:
      requests:
        storage: 5Gi
  template:
    metadata:
      labels:
        runner: sharedservices-k8s
    spec:
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 123
        # All level/role/type/user values will vary based on your SELinux policies.
        # See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/container_security_guide/docker_selinux_security_policy for information about SELinux with containers
        seLinuxOptions:
          level: "s0"
          role: "system_r"
          type: "super_t"
          user: "system_u"
        
      containers:
        - name: runner
          image: runner-image
          imagePullPolicy: Always
          env:
            - name: DOCKER_HOST
              value: unix:///var/run/docker.sock
            - name: ACTIONS_RUNNER_REQUIRE_JOB_CONTAINER
              value: "false"
          resources:
            limits:
              cpu: "3.0"
              memory: "4Gi"
            requests:
              cpu: "0.5"
              memory: "2Gi"
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash", "-c", "sudo usermod -aG docker runner && sudo usermod -aG root runner && echo 'export ACTIONS_RUNNER_REQUIRE_JOB_CONTAINER=false' >> ~/.bashrc"]
          volumeMounts:
            - name: dind-cert
              mountPath: /certs/client
              readOnly: true
            - name: var-lib-docker
              mountPath: /var/lib/docker
            - name: dind-sock
              mountPath: /run/docker
              readOnly: false
            # - name: config-script
            #   mountPath: /runner/scripts
          securityContext:
            readOnlyRootFilesystem: false ## allows writing tools cache
            allowPrivilegeEscalation: true ## allows sudo
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
      volumes:
        - name: dind-cert
          emptyDir: {}
        - name: dind-sock
          emptyDir: {}
        ## Install script for dependencies
        # - name: config-script
        #   configMap:
        #     name: k8s-config-script
        #     defaultMode: 0777
        ## This var-lib-docker vol to beef up vol on docker container
        - name: var-lib-docker
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: 
                  - "ReadWriteOnce"
                storageClassName: "gp3"
                resources:
                  requests:
                    storage: 5Gi
