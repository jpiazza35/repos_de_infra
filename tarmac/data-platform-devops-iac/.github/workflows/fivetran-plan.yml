name: 'Terraform Plan only for Fivetran'

permissions:
  id-token: write
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
  pull_request:
    paths:
    - 'terraform/fivetran/**'
    - '.github/workflows/fivetran-plan.yml'


env:
  AWS_REGION: us-east-1
  SLACK_CHANNEL_ID: "#devops-pipeline-alerts"
  ORG: clinician-nexus

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/fivetran
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: tibdex/github-app-token@v1
      id: get_installation_token
      with: 
        app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
        installation_id: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
        private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

    - name: Setup private repo credentials for private modules
      run: git config --global url."https://git:${{ steps.get_installation_token.outputs.token }}@github.com/${{ env.ORG }}".insteadOf "https://github.com/${{ env.ORG }}"

    - name: Configure AWS credentials from SS_TOOLS account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSToolsConfig

    - name: Setup Profile for SS_TOOLS
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_tools
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_tools
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_tools
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_tools  
    
    - name: Configure AWS credentials from SS_NETWORK account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.SS_NETWORKING_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSNetworkConfig

    - name: Setup Profile for ss_network
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_network
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_network
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_network
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_network

    - name: Configure AWS credentials from D_DATA_PLATFORM account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::130145099123:role/data-platform-github-oidc-role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: DDPConfig

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        terraform init
    
    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Format
      run: terraform fmt -check -recursive

    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
    
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: ${{ github.workspace }}/terraform/fivetran/tfplan
        
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })


    - name: Slack Notify
      uses: rtCamp/action-slack-notify@v2
      if: failure()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':cry: data-platform-devops-iac Terraform Plan Step :small_red_triangle_down:'
        SLACK_TITLE: D_DATA_PLATFORM Github Action - data-platform-devops-iac
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
