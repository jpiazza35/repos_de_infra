name: 'Terraform Plan/Apply/Destroy for D_DEVOPS MPT UI Infra'

permissions:
  id-token: write
  contents: read
  pull-requests: write

on:
  pull_request:
    paths:
    - 'terraform/**'
    - '.github/terraform*'
  workflow_dispatch:
    inputs:
      action-to-do:
        type: choice
        description: 'Select an action to do on D_DEVOPS account for MPT UI Infra'
        required: true
        default: 'plan'
        options: ['plan', 'apply', 'destroy']

env:
  AWS_REGION: us-east-1
  SLACK_CHANNEL_ID: "#devops-pipeline-alerts"
  ORG: clinician-nexus
  ENVIR: devops
  TF_WORKSPACE: d_devops

jobs:

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - uses: tibdex/github-app-token@v1
      id: get_installation_token
      with:
        app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
        installation_id: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
        private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

    - name: Setup private repo credentials for private modules
      run: git config --global url."https://git:${{ steps.get_installation_token.outputs.token }}@github.com/${{ env.ORG }}".insteadOf "https://github.com/${{ env.ORG }}"

    - name: Configure AWS credentials from SS_TOOLS account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSToolsConfig

    - name: Setup Profile for SS_TOOLS
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_tools
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_tools
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_tools
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_tools

    - name: Configure AWS credentials from SS_NETWORK account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.SS_NETWORKING_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSNetworkConfig

    - name: Setup Profile for ss_network
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_network
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_network
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_network
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_network

    - name: Configure AWS credentials from D_DEVOPS account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.D_DEVOPS_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: DEVOPSMPTUIConfig

    - name: Set up Vault
      id: setup-vault
      uses: hashicorp/vault-action@v3
      with:
        url: https://vault.cliniciannexus.com:8200
        role: gha-role
        method: jwt
        jwtGithubAudience: gha
        exportToken: true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        terraform init

    - name: Terraform Validate
      id: tf-validate
      run: terraform validate

    - name: Terraform Format
      id: tf-fmt
      run: terraform fmt -check -recursive

    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -var-file envvars/${{ env.ENVIR }}.tfvars -no-color -detailed-exitcode -out tfplan || export exitcode=$?
        terraform show -no-color tfplan > ${{ github.workspace }}/terraform/tfplan.out
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else   
          exit 0
        fi

    # Save plan to artifacts
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ${{ github.workspace }}/terraform/tfplan

    - name: Set terraform plan output
      uses: actions/github-script@v7
      id: tf-plan-output
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('${{ github.workspace }}/terraform/tfplan.out', 'utf8')
          const plan = plan_file.length > 120000 ? plan_file.toString().substring(0, 120000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.tf-fmt.outcome }}\`
          #### Terraform Validation ðŸ¤–\`${{ steps.tf-validate.outcome }}\`

          #### Terraform Plan ðŸ“–\`${{ steps.tf-plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${plan}
          \`\`\`
          
          </details>
          ${truncated_message}

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;

          core.setOutput('plan_output', output);

    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-output.outputs.plan_output }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    - name: Push Terraform Output to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        SUMMARY: ${{ steps.tf-plan-output.outputs.plan_output }}
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

    - name: Slack Notify - Failure
      uses: rtCamp/action-slack-notify@v2
      if: failure()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':cry: infra-cluster-resources Terraform Plan Step :small_red_triangle_down: ${{ job.status }}'
        SLACK_TITLE: D_DEVOPS Github Action - infra-cluster-resources
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Slack Notify - Success
      uses: rtCamp/action-slack-notify@v2
      if: success()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':celery-man: infra-cluster-resources Terraform Plan Step :rocket: ${{ job.status }}'
        SLACK_TITLE: D_DEVOPS Github Action - infra-cluster-resources
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  terraform-apply:
    name: 'Terraform Apply'
    if: needs.terraform-plan.outputs.tfplanExitCode == 2 && github.event.inputs.action-to-do == 'apply'
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - uses: tibdex/github-app-token@v1
      id: get_installation_token
      with:
        app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
        installation_id: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
        private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

    - name: Setup private repo credentials for private modules
      run: git config --global url."https://git:${{ steps.get_installation_token.outputs.token }}@github.com/${{ env.ORG }}".insteadOf "https://github.com/${{ env.ORG }}"

    - name: Configure AWS credentials from SS_TOOLS account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSToolsConfig

    - name: Setup Profile for SS_TOOLS
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_tools
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_tools
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_tools
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_tools

    - name: Configure AWS credentials from SS_NETWORK account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.SS_NETWORKING_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSNetworkConfig

    - name: Setup Profile for ss_network
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_network
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_network
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_network
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_network

    - name: Configure AWS credentials from D_DEVOPS account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.D_DEVOPS_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: DEVOPSMPTUIConfig

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        terraform init

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: ${{ github.workspace }}/terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Slack Notify - Success
      uses: rtCamp/action-slack-notify@v2
      if: success()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':celery-man: infra-cluster-resources Terraform Apply Step :rocket: ${{ job.status }}'
        SLACK_TITLE: D_DEVOPS Github Action - infra-cluster-resources
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Slack Notify - Failure
      uses: rtCamp/action-slack-notify@v2
      if: failure()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':cry: infra-cluster-resources Terraform Apply Step :small_red_triangle_down: ${{ job.status }}'
        SLACK_TITLE: D_DEVOPS Github Action - infra-cluster-resources
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  terraform-destroy:
    name: 'Terraform DESTROY'
    if: github.event.inputs.action-to-do == 'destroy'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - uses: tibdex/github-app-token@v1
      id: get_installation_token
      with:
        app_id: ${{ secrets.PIPELINE_GH_APP_ID }}
        installation_id: ${{ secrets.PIPELINE_GH_APP_INSTALLATION_ID }}
        private_key: ${{ secrets.PIPELINE_GH_APP_PRIVATE_KEY }}

    - name: Setup private repo credentials for private modules
      run: git config --global url."https://git:${{ steps.get_installation_token.outputs.token }}@github.com/${{ env.ORG }}".insteadOf "https://github.com/${{ env.ORG }}"

    - name: Configure AWS credentials from SS_TOOLS account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.SS_TOOLS_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSToolsConfig

    - name: Setup Profile for SS_TOOLS
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_tools
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_tools
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_tools
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_tools

    - name: Configure AWS credentials from SS_NETWORK account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.SS_NETWORKING_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: SSNetworkConfig

    - name: Setup Profile for ss_network
      run: |
          aws configure set region ${{ env.AWS_REGION }} --profile ss_network
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile ss_network
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile ss_network
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile ss_network

    - name: Configure AWS credentials from D_DEVOPS account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.D_DEVOPS_GH_OIDC_IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: DEVOPSMPTUIConfig

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        terraform init

    - name: Terraform DESTROY
      run: terraform destroy -var-file envvars/${{ env.ENVIR }}.tfvars -auto-approve

    - name: Slack Notify - Success
      uses: rtCamp/action-slack-notify@v2
      if: success()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':celery-man: infra-cluster-resources Terraform DESTROY Step :fire: :fire: ${{ job.status }}'
        SLACK_TITLE: D_DEVOPS Github Action - infra-cluster-resources
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Slack Notify - Failure
      uses: rtCamp/action-slack-notify@v2
      if: failure()
      env:
        SLACK_CHANNEL: ${{ env.SLACK_CHANNEL_ID }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':cry: infra-cluster-resources Terraform DESTROY Step :fire: :small_red_triangle_down: ${{ job.status }}'
        SLACK_TITLE: D_DEVOPS Github Action - infra-cluster-resources
        SLACK_USERNAME: DevOps
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
